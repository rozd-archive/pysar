<?xml version="1.0" ?>
<mx:WindowedApplication height="100%"
xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" xmlns:aswing="org.aswing.*" creationComplete="this.init();">
	<mx:Script>
		<![CDATA[
			import com.rozdobudko.suvii.pysar.model.data.FindData;
			import com.rozdobudko.suvii.pysar.model.data.LogEntry;
			import com.rozdobudko.suvii.pysar.model.data.LogEntryText;
			import mx.utils.UIDUtil;
			import com.rozdobudko.suvii.pysar.model.LogProxy;
			import com.rozdobudko.suvii.pysar.model.OutputProxy;
			import com.rozdobudko.suvii.pysar.PysarFacade;
			import mx.collections.ArrayCollection;
			import mx.core.UIComponent;
			import flash.filesystem.*;
			import flash.events.Event;
			
			private var file:File;
			private var openFileStream:FileStream;
			private var writeFileStream:FileStream;
			private var bitmap:BitmapData;
			private var xml:XML;
			
			private var log:File;
			
			private var entries:ArrayCollection = new ArrayCollection();
			
			private function init():void
			{
				this.file = new File();
//				this.file.addEventListener(Event.OPEN, this.openHandler);
//				this.file.addEventListener(Event.SELECT, this.selectHandler);
//				this.file.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, this.uploadHandler);
//				this.file.addEventListener(Event.COMPLETE, this.completeHandler);
				
				this.log = new File();
				this.log.addEventListener(Event.OPEN, this.openHandler);
				this.log.addEventListener(Event.SELECT, this.selectHandler);
				this.log.addEventListener(DataEvent.UPLOAD_COMPLETE_DATA, this.uploadHandler);
				this.log.addEventListener(Event.COMPLETE, this.completeHandler);
				
				
				this.file = File.desktopDirectory;
				trace(this.file.nativePath);
				this.file = file.resolvePath("test/settings.xml");
				trace(this.file.nativePath);
				
				openFileStream = new FileStream();
				openFileStream.addEventListener(Event.COMPLETE, openToReadHandler);
				openFileStream.addEventListener(IOErrorEvent.IO_ERROR, fileIOErrorHandler);
				
				writeFileStream = new FileStream();
				writeFileStream.addEventListener(Event.COMPLETE, openToWriteHandler);
				writeFileStream.addEventListener(IOErrorEvent.IO_ERROR, fileIOErrorHandler);
				
				openFileStream.openAsync(file, FileMode.READ);
				
				var docsDir:File = File.documentsDirectory;
				try
				{
				    docsDir.browseForSave("Save As");
				    docsDir.addEventListener(Event.SELECT, saveData);
				}
				catch (error:Error)
				{
				    trace("Failed:", error.message)
				}
				
				function saveData(event:Event):void 
				{
				    var newFile:File = event.target as File;
				    var str:String = "Hello.";
				    if (!newFile.exists)
				    {
				        var stream:FileStream = new FileStream();
				        stream.open(newFile, FileMode.WRITE);
				        stream.writeUTFBytes(str);
				        stream.close();
				    }
				}

				
			}
			
			private function openToReadHandler(event:Event):void
			{
				trace("openToReadHandler");
				
				//var str:* = openFileStream.readObject();
				//this.xml = new XML(str);
				//trace(str.x);
			    this.openFileStream.close();
			    //this.writeFileStream.openAsync(file, FileMode.WRITE);
			}
			
			private function openToWriteHandler(event:Event):void
			{
				trace("openToWriteHandler");
			}
			
			private function save2(event:Event):void
			{
//				this.xml.content.styles.levels = "asdsadas";
				this.writeFileStream.writeObject({x:5});
//				this.writeFileStream
//				this.fileStream.
				writeFileStream.close();
			}
			
			private function save3():void
			{
				//this.log
			}
			
			private function fileIOErrorHandler(event:IOErrorEvent):void
			{
				trace("fileIOErrorHandler");
			}
			
			private function browse(event:Event):void
			{
				trace("browse");
				
				file.browseForOpen("title");
			}
			
			private function save(event:Event):void
			{
				trace("browse");
				
				this.log.browseForSave("title");
			}
			private function completeHandler(event:Event):void
			{
				trace("completeHandler");
				trace(this.file);
			}
			private function selectHandler(event:Event):void
			{
				trace("selectHandler");
				
				trace(this.file);
			}
			
			private function uploadHandler(event:Event):void
			{
				trace("uploadHandler");
			}
			
			private function openHandler(event:Event):void
			{
				trace("openHandler");
			}
			
		]]>
	</mx:Script>
	<mx:Button id="btn" label="Button" click="browse(event)"/>
	<mx:Button id="saveBtn" label="Save" click="save(event)" x="73"/>
	<mx:Button label="Save" click="save2(event)" x="244" y="293"/>
	<mx:Canvas x="73" y="54" width="200" height="200" id="can">
	</mx:Canvas>
	<mx:Image id="img" x="281" y="54"/>
</mx:WindowedApplication>